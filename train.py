# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/KrimsonKarrot/edbb03a590e9d888352a4f8dfca71630/train.ipynb
"""

import torch
from torch import nn

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/University /Trimester 2/Software tech/train.csv')

sns.histplot(df['log_price'], kde=True)
plt.title('Distribution of Target Variable (Price)')
plt.show()

print(df.info())
print(df.describe())

df = df.drop(columns=['id', 'name'])

df.hist(bins=50, figsize=(20,15))
plt.show()

numeric_df = df.select_dtypes(include=[float, int])

corr_matrix = numeric_df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.show()

df = df[df['log_price'] < df['log_price'].quantile(0.95)]
df = df.dropna()

sns.pairplot(df)
plt.show()

df = pd.get_dummies(df, drop_first=True)

I'm X = df.drop('log_price', axis=1)
y = df['log_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

import os
import joblib
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder


df = pd.read_csv('/content/drive/MyDrive/University /Trimester 2/Software tech/train.csv')


df = df[df['log_price'] > 0]
df['log_price'] = np.log(df['log_price'])


df = df.dropna()


X = df.drop(columns=['log_price', 'log_price'])
y = df['log_price']


X = pd.get_dummies(X, drop_first=True)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


models = {
    'Linear Regression': LinearRegression(),

}


checkpoint_path = "/content/drive/MyDrive/model_checkpoints/"


if not os.path.exists(checkpoint_path):
    os.makedirs(checkpoint_path)


for name, model in models.items():
    model_checkpoint = f"{checkpoint_path}{name}_checkpoint.pkl"


    if os.path.exists(model_checkpoint):
        print(f"Loading checkpoint for {name}...")
        model = joblib.load(model_checkpoint)
    else:
        model.fit(X_train, y_train)
        joblib.dump(model, model_checkpoint)


    y_pred = model.predict(X_test)
    print(f"{name} R^2 score: {r2_score(y_test, y_pred)}")

print("Model training complete. Checkpoints saved.")